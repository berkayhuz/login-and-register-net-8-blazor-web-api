@page "/identity/account/login"
@using Client.Pages.Components
@using Syncfusion.Blazor.Popups
@layout AuthenticationLayout
@inject SfDialogService DialogService
<div class="container">
	<div class="row">
		<div class="col-lg-3">
		</div>
		<div class="col-lg-4">
			<EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
					<DataAnnotationsValidator />
					<div class="card">
						<div class="card-header">
							Hoşgeldiniz
						</div>
						<div class="card-body">
							<div class="form-group mt-3">
								<label class="form-label">Email</label>
								<InputText @bind-Value="User.Email" class="form-control"></InputText>
							</div>
							<div class="form-group mt-3">
								<label class="form-label">Şifre</label>
								<InputText type="password" @bind-Value="User.Password" class="form-control"></InputText>
							</div>
							<div class="form-group mt-3">
								@if (ShowLoadingButton)
								{
									<ButtonLoadingSpinner></ButtonLoadingSpinner>
								}
								else
								{
									<button class="btn btn-outline-primary float-end" type="submit">Giriş yap</button>
								}
							</div>
						</div>
						<div class="card-footer">
							<span class="text-center">
								Hesabın yok mu? |
								<a class="btn-link" href="identity/account/register">Üye ol</a>
							</span>
							<ValidationSummary />
						</div>
					</div>
				</EditForm>
			</div>
		</div>
		<div class="col-lg-3">
		</div>
	</div>

@code {

	public bool ShowLoadingButton { get; set; } = false;

	Login User = new();
	async Task HandleLogin()
	{
		ShowLoadingButton = true;
		var result = await accountService.SignInAsync(User);
		if (result.Flag)
		{
			await DisplayDialog(result.Message, "Giriş başarılı");
			var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
			await customAuthStateProvider.UpdateAuthenticationState(new UserSession() { Token = result.Token, RefreshToken = result.RefreshToken });
			NavManager.NavigateTo("/", forceLoad: true);
		}
		else{
			await DisplayDialog(result.Message, "Giriş başarısız");
		}
		ShowLoadingButton = false;
	}
	private async Task DisplayDialog(string content, string title)
	{
		await DialogService.AlertAsync(content, title);
	}
}